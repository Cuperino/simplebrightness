#!/usr/bin/python3

# MIT License
# 
# Copyright (c) 2019, 2020 Javier O. Cordero PÃ©rez
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import subprocess
import configparser
import json
from tkinter import Tk, Button, DoubleVar, Frame, Label, Scale, W, X, BOTTOM, CENTER, LEFT, HORIZONTAL

def updateBrightness(val):
  # Compute brightness in the appropriate scale
  brightness = round(float(val)*unit)
  # Change brightness
  process = subprocess.run(["brightnessctl", "-m", "s", str(brightness)], stdout=subprocess.PIPE)
  # Display value from Scale in two decimal places
  percentageLabel = "Brightness: " + '%.2f' % float(val) + "%"
  label.config(text = percentageLabel)

def getCurrentPercentage():
  process = subprocess.Popen(["brightnessctl", "-m"], stdout=subprocess.PIPE)
  result = str(process.communicate()[0])[0:-3].split(',')
  return round(100*float(result[2])/float(maxBrightness),3)

def toggleBrightness():
  global tempPercentage
  # Get current brightness
  currentPercentage = getCurrentPercentage()
  # If current brightness is greater than 0, save curent brightness and turn backlight off
  if currentPercentage > 0:
    tempPercentage = currentPercentage
    percentage.set(0)
    updateBrightness(0)
  # Otherwise, return backlight back to its last observed value
  else:
    setBrightness(tempPercentage)

def setBrightness(value):
  percentage.set(value)
  updateBrightness(value)  

def nextIntensity():
  # Get current brightness
  currentPercentage = getCurrentPercentage()
  # Go through keys
  global keys
  for key in keys:
    if key > currentPercentage:
      print("goRightkey")
      print(key)
      setBrightness(key)
      break

def previousIntensity():
  # Get current brightness
  currentPercentage = getCurrentPercentage()
  # Go through keys
  global keys
  previous = None
  l = len(keys)
  for index, key in enumerate(keys):
    if key >= currentPercentage and previous is not None:
      print("goLeftkey")
      print(previous)
      setBrightness(previous)
      break
    else:
      previous = keys[index]

def saveIntensity():
  # Get current brightness
  currentPercentage = getCurrentPercentage()
  # Go through keys
  global keys
  for index, key in enumerate(keys):
    # Unset Key
    if key == currentPercentage:
      if key > minBrightness and key < 100:
        del keys[index];
      break
    # Set Key
    elif key > currentPercentage:      
      keys.insert(index, currentPercentage)
      break

def on_closing():
    global keys
    keysAsString = ', '.join(str(value) for value in keys)
    keysAsString = '[' + keysAsString + ']'
    config['DEFAULT']['Brightness'] = keysAsString
    with open('simplebrightness.ini', 'w') as configfile:
        config.write(configfile)
    root.destroy()

# Get initial system values
process = subprocess.Popen(["brightnessctl", "-m"], stdout=subprocess.PIPE)
# Read process output: Take first line, convert to string, remove last 3 chars, and split on commas.
result = str(process.communicate()[0])[0:-3].split(',')
maxBrightness = int(result[4])
unit = (maxBrightness)/100
minBrightness = round(1/unit, 3)
current = round(100*float(result[2])/float(maxBrightness),3)
tempPercentage = current

# Get save file settings
config = configparser.ConfigParser()
config['DEFAULT'] = {'Brightness': '[0,' + str(minBrightness) +',100]'}
config.read('simplebrightness.ini')
# Initialize keys
keys = json.loads(config['DEFAULT']['Brightness'])

# Initialize GUI
root = Tk()
root.title("SimpleBrightness")
buttons = Frame(root)
buttons.pack(side = BOTTOM)

#  Initialize brightness Label
label = Label(root, width=20, text="Brightness: "+'%.2f'%current+"%")
label.pack(anchor=CENTER, expand=True, fill=X)

# Initialize Scale
percentage = DoubleVar()
percentage.set(current)
# Using 0.001 resolution allows the scale to get precise values on a high res window
scale = Scale(root, from_=minBrightness, to=100, variable=percentage, orient=HORIZONTAL, command=updateBrightness, resolution=0.001, showvalue=0)
scale.pack(anchor=CENTER, expand=True, fill=X)

# Toggle brightness on or off
toggle = Button(buttons, command=toggleBrightness, text="\u2606")
toggle.pack(anchor=W,side=LEFT, expand=False, fill=X)

# Previous button
toggle = Button(buttons, command=previousIntensity, text="\u25C0")
toggle.pack(anchor=W, side=LEFT, expand=False, fill=X)

# Set button
toggle = Button(buttons, command=saveIntensity, text="\u25CF")
toggle.pack(anchor=W, side=LEFT, expand=False, fill=X)

# Next button
toggle = Button(buttons, command=nextIntensity, text="\u25B6")
toggle.pack(anchor=W, side=LEFT, expand=False, fill=X)

# Set minimum window size
root.update()
root.minsize(root.winfo_width(), root.winfo_height())
root.maxsize(65536, root.winfo_height())

# Trash values that are no longer necessary
del process
del result
del current

root.protocol("WM_DELETE_WINDOW", on_closing)

# Start GUI loop
root.mainloop()
